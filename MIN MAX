 import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def evaluate(board):
    # Check rows
    for row in board:
        if row.count('X') == 3:
            return 1
        elif row.count('O') == 3:
            return -1

    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] == 'X':
            return 1
        elif board[0][col] == board[1][col] == board[2][col] == 'O':
            return -1

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] == 'X' or board[0][2] == board[1][1] == board[2][0] == 'X':
        return 1
    elif board[0][0] == board[1][1] == board[2][2] == 'O' or board[0][2] == board[1][1] == board[2][0] == 'O':
        return -1

    return 0

def game_over(board):
    if evaluate(board) != 0 or not any(' ' in row for row in board):
        return True
    return False

def minimax(board, depth, maximizing_player):
    if game_over(board) or depth == 0:
        return evaluate(board)

    if maximizing_player:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth - 1, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth - 1, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

def find_best_move(board):
    best_move = None
    best_eval = -math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                eval = minimax(board, 10, False)
                board[i][j] = ' '
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)
    return best_move

if __name__ == "__main__":
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print_board(board)

    while not game_over(board):
        player_move = input("Enter your move (row col): ").split()
        row, col = int(player_move[0]), int(player_move[1])
        if board[row][col] == ' ':
            board[row][col] = 'O'
            print_board(board)
        else:
            print("Invalid move, try again.")
            continue

        if game_over(board):
            break

        ai_move = find_best_move(board)
        board[ai_move[0]][ai_move[1]] = 'X'
        print("AI move:")
        print_board(board)

    result = evaluate(board)
    if result == 1:
        print("You lost!")
    elif result == -1:
        print("You won!")
    else:
        print("It's a draw!")

