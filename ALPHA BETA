class Game:
    def __init__(self):
        self.board = [' '] * 9
        self.current_player = 'X'

    def print_board(self):
        for i in range(0, 9, 3):
            print(' | '.join(self.board[i:i+3]))
            if i < 6:
                print('-' * 9)

    def get_empty_cells(self):
        return [i for i, cell in enumerate(self.board) if cell == ' ']

    def is_winner(self, player):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ]
        for combo in winning_combinations:
            if all(self.board[i] == player for i in combo):
                return True
        return False

    def is_game_over(self):
        return self.is_winner('X') or self.is_winner('O') or ' ' not in self.board

    def evaluate(self):
        if self.is_winner('X'):
            return 1
        elif self.is_winner('O'):
            return -1
        else:
            return 0

    def minimax(self, depth, alpha, beta, is_maximizing):
        if self.is_winner('X'):
            return 1
        elif self.is_winner('O'):
            return -1
        elif ' ' not in self.board:
            return 0

        if is_maximizing:
            max_eval = float('-inf')
            for cell in self.get_empty_cells():
                self.board[cell] = 'X'
                eval = self.minimax(depth+1, alpha, beta, False)
                self.board[cell] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = float('inf')
            for cell in self.get_empty_cells():
                self.board[cell] = 'O'
                eval = self.minimax(depth+1, alpha, beta, True)
                self.board[cell] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def find_best_move(self):
        best_eval = float('-inf')
        best_move = None
        for cell in self.get_empty_cells():
            self.board[cell] = 'X'
            eval = self.minimax(0, float('-inf'), float('inf'), False)
            self.board[cell] = ' '
            if eval > best_eval:
                best_eval = eval
                best_move = cell
        return best_move


if __name__ == "__main__":
    game = Game()
    while not game.is_game_over():
        if game.current_player == 'X':
            move = int(input("Enter your move (0-8): "))
            game.board[move] = 'X'
        else:
            move = game.find_best_move()
            game.board[move] = 'O'

        game.print_board()
        if game.is_winner(game.current_player):
            print(game.current_player, "wins!")
            break
        elif ' ' not in game.board:
            print("It's a draw!")
            break

        game.current_player = 'O' if game.current_player == 'X' else 'X'
