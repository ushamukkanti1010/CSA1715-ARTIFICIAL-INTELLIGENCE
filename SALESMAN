import itertools

def total_distance(path, graph):
    distance = 0
    for i in range(len(path) - 1):
        distance += graph[path[i]][path[i + 1]]
    return distance

def traveling_salesman(graph):
    cities = list(graph.keys())
    shortest_path = None
    min_distance = float('inf')

    for path in itertools.permutations(cities):
        distance = total_distance(path, graph)
        if distance < min_distance:
            min_distance = distance
            shortest_path = path

    return shortest_path, min_distance

if __name__ == "__main__":
    # Example graph represented as an adjacency matrix
    graph = {
        'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
        'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
        'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
        'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
    }

    shortest_path, min_distance = traveling_salesman(graph)
    print("Shortest Path:", shortest_path)
    print("Minimum Distance:", min_distance)
