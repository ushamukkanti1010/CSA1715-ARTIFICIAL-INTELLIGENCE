import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0, cost=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(str(self.state))

    def generate_children(self):
        children = []
        zero_index = self.state.index(0)
        row, col = zero_index // 3, zero_index % 3

        for dr, dc, action in [(0, 1, 'RIGHT'), (0, -1, 'LEFT'), (1, 0, 'DOWN'), (-1, 0, 'UP')]:
            if 0 <= row + dr < 3 and 0 <= col + dc < 3:
                new_state = self.state[:]
                new_row, new_col = row + dr, col + dc
                new_index = new_row * 3 + new_col
                new_state[zero_index], new_state[new_index] = new_state[new_index], new_state[zero_index]
                children.append(PuzzleNode(new_state, self, action, self.depth + 1, 0))
        return children

    def get_path(self):
        path = []
        node = self
        while node:
            path.append(node)
            node = node.parent
        return path[::-1]

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i * 3 + j]
            if value != 0:
                goal_row, goal_col = (value - 1) // 3, (value - 1) % 3
                distance += abs(goal_row - i) + abs(goal_col - j)
    return distance

def solve_puzzle(initial_state):
    start_node = PuzzleNode(initial_state, None, None, 0, 0)
    goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]

    open_list = []
    closed_set = set()

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal_state:
            return current_node.get_path()

        closed_set.add(current_node)

        for child in current_node.generate_children():
            if child not in closed_set:
                child.cost = child.depth + manhattan_distance(child.state)
                heapq.heappush(open_list, child)

    return None

def print_solution(solution):
    if solution:
        print("Solution found! Number of moves:", len(solution) - 1)
        for i, node in enumerate(solution):
            print("Move:", i, "-", node.move)
            print_state(node.state)
            print()
    else:
        print("No solution found.")

def print_state(state):
    for i in range(3):
        print(state[i * 3:i * 3 + 3])

if __name__ == "__main__":
    initial_state = [1, 2, 3, 4, 0, 5, 6, 7, 8]  # Example initial state
    solution = solve_puzzle(initial_state)
    print_solution(solution)
